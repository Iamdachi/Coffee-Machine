type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Machine.java
  visible: true
  text: |
    package machine;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;


    public class Machine {
        private List<Integer> storage;
        private int dispCups;
        private int money;

        public Machine() {
            this.storage = new ArrayList<>();
            this.storage.add(400);
            this.storage.add(540);
            this.storage.add(120);
            this.dispCups = 9;
            this.money = 550;
        }

        // adds ingredient for 'fill' method
        public void addIngredient(Integer ingredient, int index) {
            this.storage.set(index, this.storage.get(index) + ingredient);
        }

        public void printState(){
            System.out.println("\nThe coffee machine has:\n" +
                    this.storage.get(0) + " ml of water\n" +
                    this.storage.get(1) + " ml of milk\n" +
                    this.storage.get(2) + " g of coffee beans\n" +
                    this.dispCups + " disposable cups\n$" +
                    this.money + " of money\n");
        }

        public void take(){
            System.out.println("I gave you $" + this.money + "\n");
            this.money = 0;
        }

        public void addDispCups(int dispCups) {
            this.dispCups += dispCups;
        }

        // returns true if we could buy
        public boolean buy(CoffeeType coffeeType) {
            Coffee buying = new Coffee(coffeeType);
            if(ableToMake(this.storage, buying.getIngredients()) > 0){
                System.out.println("I have enough resources, making you a coffee!");
                this.money += buying.getPrice();
                for (int i = 0; i < 3; i++) {
                    this.storage.set(i, this.storage.get(i) - buying.getIngredients().get(i));
                }
                this.dispCups--;
                return true;
            } else {
                System.out.println("Sorry, not enough " + lacking(this.storage, buying.getIngredients()) + "\n");
            }
            return false;
        }
        public static int ableToMake(List<Integer> storage, List<Integer> needed){
            List<Integer> cups = new ArrayList<>();
            for(int i = 0; i < 3; i++) {
                if(needed.get(i) == 0) i++; // espresso error / 0
                cups.add(storage.get(i) / needed.get(i));
            }
            Optional<Integer> min = cups.stream().min(Integer::compare);
            return min.get();
        }

        public static String lacking(List<Integer> storage, List<Integer> needed){
            for(int i = 0; i < 3; i++) {
                if(needed.get(i) == 0) i++; // espresso error / 0
                if (storage.get(i) / needed.get(i) < 1) {
                    if(i == 0) return "water!";
                    if(i == 1) return "milk!";
                    if(i == 2) return "coffee beans!";
                }
            }
            return "";
        }


    }
  learner_created: true
- name: src/machine/Coffee.java
  visible: true
  text: |
    package machine;

    import java.util.ArrayList;
    import java.util.List;

    public class Coffee {
        private List<Integer> ingredients;
        private int price;

        public Coffee(CoffeeType type) {
            ingredients = new ArrayList<>();
            switch (type) {
                case CAPPUCCINO:
                    this.ingredients.add(200);
                    this.ingredients.add(100);
                    this.ingredients.add(12);
                    this.price = 6;
                    break;
                case LATE:
                    this.ingredients.add(350);
                    this.ingredients.add(75);
                    this.ingredients.add(20);
                    this.price = 7;
                    break;
                case ESPRESSO:
                    this.ingredients.add(250);
                    this.ingredients.add(0);
                    this.ingredients.add(16);
                    this.price = 4;
                    break;
                default:
                    System.out.println("Unsupported enum constant.");
            }
        }

        public int getPrice() {
            return this.price;
        }

        public List<Integer> getIngredients() {
            return this.ingredients;
        }
    }
  learner_created: true
- name: src/machine/CoffeeType.java
  visible: true
  text: |
    package machine;

    public enum CoffeeType {
        ESPRESSO, LATE, CAPPUCCINO
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5334#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 21 Aug 2022 21:16:28 UTC
record: -1
